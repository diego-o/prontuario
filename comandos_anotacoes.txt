"start": "nodemon ./server.js"

NodeJS
criar arquivo descritor no inicio do projeto
	npm init -y
	
instalar dependencias para criar api no node
	npm i --save express@4.15.3 mongoose@4.11.1 node-restful@0.2.6 body-parser@1.17.2 cors@2.8.3
	
executar compose docker
	docker-compose up

	docker network inspect networkname
	
docker image
	-- criar imagem
	docker image build -t <name-img> .
	
	
Executar portainer (ps como adm)
    --windows
	netsh interface portproxy add v4tov4 listenaddress=10.0.75.1 listenport=2375 connectaddress=127.0.0.1 connectport=2375
	netsh advfirewall firewall add rule name="docker management" dir=in action=allow protocol=TCP localport=2375
	docker run -d -p 9000:9000 -v portainer_data:/data portainer/portainer -H tcp://10.0.75.1:2375
	http://localhost:9000

	--linux
	docker volume create portainer_data
	docker run -d -p 443:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer

Apagrar regras iptables no linux				
	sudo iptables -F
Listar regras
    sudo iptables -L
Liberar portas no linux		
	sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT
	sudo iptables -A INPUT -p tcp --dport 81 -j ACCEPT
	sudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT
	
	-- iptables-persistent
	-- salvar nova regras
		sudo netfilter-persistent save
	
	
	
	docker volume rm $(docker volume ls -q -f dangling=true)  
	
	

Alterar região instancia VM (Google Cloud)
listar regiões
	gcloud compute zones list

mover de gegião
	gcloud compute instances move linux --zone southamerica-east1-b --destination-zone southamerica-east1-a

criar comando para executar containers ao inicar server
Crie um arquivo para seu script e escreva os comandos nele.
	sudo nano /etc/init.d/inicar

	comando : 
	cd prontuario/services/ && sudo docker container start 3ad70716be09 && sudo docker-compose up -d

Salve e saia: CTRL+ X, Y, ENTER
De permissão para ser executável
	sudo chmod 755 /etc/init.d/inicar

Registra o script para ser executado na inicialização
	sudo update-rc.d inicar defaults


	